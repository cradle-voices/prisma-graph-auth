// Code generated by Prisma (prisma@1.34.12). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  otp: (where?: OtpWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  otp: (where: OtpWhereUniqueInput) => OtpNullablePromise;
  otps: (args?: {
    where?: OtpWhereInput;
    orderBy?: OtpOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Otp>;
  otpsConnection: (args?: {
    where?: OtpWhereInput;
    orderBy?: OtpOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => OtpConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createOtp: (data: OtpCreateInput) => OtpPromise;
  updateOtp: (args: {
    data: OtpUpdateInput;
    where: OtpWhereUniqueInput;
  }) => OtpPromise;
  updateManyOtps: (args: {
    data: OtpUpdateManyMutationInput;
    where?: OtpWhereInput;
  }) => BatchPayloadPromise;
  upsertOtp: (args: {
    where: OtpWhereUniqueInput;
    create: OtpCreateInput;
    update: OtpUpdateInput;
  }) => OtpPromise;
  deleteOtp: (where: OtpWhereUniqueInput) => OtpPromise;
  deleteManyOtps: (where?: OtpWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  otp: (
    where?: OtpSubscriptionWhereInput
  ) => OtpSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type OtpOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "otp_ASC"
  | "otp_DESC"
  | "expires_at_ASC"
  | "expires_at_DESC"
  | "is_verified_ASC"
  | "is_verified_DESC"
  | "userId_ASC"
  | "userId_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "token_ASC"
  | "token_DESC"
  | "isVerified_ASC"
  | "isVerified_DESC"
  | "resetToken_ASC"
  | "resetToken_DESC"
  | "resetTokenExpires_ASC"
  | "resetTokenExpires_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type OtpWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface OtpWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  otp?: Maybe<String>;
  otp_not?: Maybe<String>;
  otp_in?: Maybe<String[] | String>;
  otp_not_in?: Maybe<String[] | String>;
  otp_lt?: Maybe<String>;
  otp_lte?: Maybe<String>;
  otp_gt?: Maybe<String>;
  otp_gte?: Maybe<String>;
  otp_contains?: Maybe<String>;
  otp_not_contains?: Maybe<String>;
  otp_starts_with?: Maybe<String>;
  otp_not_starts_with?: Maybe<String>;
  otp_ends_with?: Maybe<String>;
  otp_not_ends_with?: Maybe<String>;
  expires_at?: Maybe<DateTimeInput>;
  expires_at_not?: Maybe<DateTimeInput>;
  expires_at_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  expires_at_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  expires_at_lt?: Maybe<DateTimeInput>;
  expires_at_lte?: Maybe<DateTimeInput>;
  expires_at_gt?: Maybe<DateTimeInput>;
  expires_at_gte?: Maybe<DateTimeInput>;
  is_verified?: Maybe<Boolean>;
  is_verified_not?: Maybe<Boolean>;
  user?: Maybe<UserWhereInput>;
  userId?: Maybe<String>;
  userId_not?: Maybe<String>;
  userId_in?: Maybe<String[] | String>;
  userId_not_in?: Maybe<String[] | String>;
  userId_lt?: Maybe<String>;
  userId_lte?: Maybe<String>;
  userId_gt?: Maybe<String>;
  userId_gte?: Maybe<String>;
  userId_contains?: Maybe<String>;
  userId_not_contains?: Maybe<String>;
  userId_starts_with?: Maybe<String>;
  userId_not_starts_with?: Maybe<String>;
  userId_ends_with?: Maybe<String>;
  userId_not_ends_with?: Maybe<String>;
  AND?: Maybe<OtpWhereInput[] | OtpWhereInput>;
  OR?: Maybe<OtpWhereInput[] | OtpWhereInput>;
  NOT?: Maybe<OtpWhereInput[] | OtpWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  token?: Maybe<String>;
  token_not?: Maybe<String>;
  token_in?: Maybe<String[] | String>;
  token_not_in?: Maybe<String[] | String>;
  token_lt?: Maybe<String>;
  token_lte?: Maybe<String>;
  token_gt?: Maybe<String>;
  token_gte?: Maybe<String>;
  token_contains?: Maybe<String>;
  token_not_contains?: Maybe<String>;
  token_starts_with?: Maybe<String>;
  token_not_starts_with?: Maybe<String>;
  token_ends_with?: Maybe<String>;
  token_not_ends_with?: Maybe<String>;
  isVerified?: Maybe<Boolean>;
  isVerified_not?: Maybe<Boolean>;
  otps_every?: Maybe<OtpWhereInput>;
  otps_some?: Maybe<OtpWhereInput>;
  otps_none?: Maybe<OtpWhereInput>;
  resetToken?: Maybe<String>;
  resetToken_not?: Maybe<String>;
  resetToken_in?: Maybe<String[] | String>;
  resetToken_not_in?: Maybe<String[] | String>;
  resetToken_lt?: Maybe<String>;
  resetToken_lte?: Maybe<String>;
  resetToken_gt?: Maybe<String>;
  resetToken_gte?: Maybe<String>;
  resetToken_contains?: Maybe<String>;
  resetToken_not_contains?: Maybe<String>;
  resetToken_starts_with?: Maybe<String>;
  resetToken_not_starts_with?: Maybe<String>;
  resetToken_ends_with?: Maybe<String>;
  resetToken_not_ends_with?: Maybe<String>;
  resetTokenExpires?: Maybe<DateTimeInput>;
  resetTokenExpires_not?: Maybe<DateTimeInput>;
  resetTokenExpires_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  resetTokenExpires_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  resetTokenExpires_lt?: Maybe<DateTimeInput>;
  resetTokenExpires_lte?: Maybe<DateTimeInput>;
  resetTokenExpires_gt?: Maybe<DateTimeInput>;
  resetTokenExpires_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface OtpCreateInput {
  otp?: Maybe<String>;
  expires_at?: Maybe<DateTimeInput>;
  is_verified?: Maybe<Boolean>;
  user?: Maybe<UserCreateOneWithoutOtpsInput>;
  userId?: Maybe<String>;
}

export interface UserCreateOneWithoutOtpsInput {
  create?: Maybe<UserCreateWithoutOtpsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutOtpsInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  token?: Maybe<String>;
  isVerified?: Maybe<Boolean>;
  resetToken?: Maybe<String>;
  resetTokenExpires?: Maybe<DateTimeInput>;
}

export interface OtpUpdateInput {
  otp?: Maybe<String>;
  expires_at?: Maybe<DateTimeInput>;
  is_verified?: Maybe<Boolean>;
  user?: Maybe<UserUpdateOneWithoutOtpsInput>;
  userId?: Maybe<String>;
}

export interface UserUpdateOneWithoutOtpsInput {
  create?: Maybe<UserCreateWithoutOtpsInput>;
  update?: Maybe<UserUpdateWithoutOtpsDataInput>;
  upsert?: Maybe<UserUpsertWithoutOtpsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutOtpsDataInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  token?: Maybe<String>;
  isVerified?: Maybe<Boolean>;
  resetToken?: Maybe<String>;
  resetTokenExpires?: Maybe<DateTimeInput>;
}

export interface UserUpsertWithoutOtpsInput {
  update: UserUpdateWithoutOtpsDataInput;
  create: UserCreateWithoutOtpsInput;
}

export interface OtpUpdateManyMutationInput {
  otp?: Maybe<String>;
  expires_at?: Maybe<DateTimeInput>;
  is_verified?: Maybe<Boolean>;
  userId?: Maybe<String>;
}

export interface UserCreateInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  token?: Maybe<String>;
  isVerified?: Maybe<Boolean>;
  otps?: Maybe<OtpCreateManyWithoutUserInput>;
  resetToken?: Maybe<String>;
  resetTokenExpires?: Maybe<DateTimeInput>;
}

export interface OtpCreateManyWithoutUserInput {
  create?: Maybe<OtpCreateWithoutUserInput[] | OtpCreateWithoutUserInput>;
  connect?: Maybe<OtpWhereUniqueInput[] | OtpWhereUniqueInput>;
}

export interface OtpCreateWithoutUserInput {
  otp?: Maybe<String>;
  expires_at?: Maybe<DateTimeInput>;
  is_verified?: Maybe<Boolean>;
  userId?: Maybe<String>;
}

export interface UserUpdateInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  token?: Maybe<String>;
  isVerified?: Maybe<Boolean>;
  otps?: Maybe<OtpUpdateManyWithoutUserInput>;
  resetToken?: Maybe<String>;
  resetTokenExpires?: Maybe<DateTimeInput>;
}

export interface OtpUpdateManyWithoutUserInput {
  create?: Maybe<OtpCreateWithoutUserInput[] | OtpCreateWithoutUserInput>;
  delete?: Maybe<OtpWhereUniqueInput[] | OtpWhereUniqueInput>;
  connect?: Maybe<OtpWhereUniqueInput[] | OtpWhereUniqueInput>;
  set?: Maybe<OtpWhereUniqueInput[] | OtpWhereUniqueInput>;
  disconnect?: Maybe<OtpWhereUniqueInput[] | OtpWhereUniqueInput>;
  update?: Maybe<
    | OtpUpdateWithWhereUniqueWithoutUserInput[]
    | OtpUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | OtpUpsertWithWhereUniqueWithoutUserInput[]
    | OtpUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<OtpScalarWhereInput[] | OtpScalarWhereInput>;
  updateMany?: Maybe<
    OtpUpdateManyWithWhereNestedInput[] | OtpUpdateManyWithWhereNestedInput
  >;
}

export interface OtpUpdateWithWhereUniqueWithoutUserInput {
  where: OtpWhereUniqueInput;
  data: OtpUpdateWithoutUserDataInput;
}

export interface OtpUpdateWithoutUserDataInput {
  otp?: Maybe<String>;
  expires_at?: Maybe<DateTimeInput>;
  is_verified?: Maybe<Boolean>;
  userId?: Maybe<String>;
}

export interface OtpUpsertWithWhereUniqueWithoutUserInput {
  where: OtpWhereUniqueInput;
  update: OtpUpdateWithoutUserDataInput;
  create: OtpCreateWithoutUserInput;
}

export interface OtpScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  otp?: Maybe<String>;
  otp_not?: Maybe<String>;
  otp_in?: Maybe<String[] | String>;
  otp_not_in?: Maybe<String[] | String>;
  otp_lt?: Maybe<String>;
  otp_lte?: Maybe<String>;
  otp_gt?: Maybe<String>;
  otp_gte?: Maybe<String>;
  otp_contains?: Maybe<String>;
  otp_not_contains?: Maybe<String>;
  otp_starts_with?: Maybe<String>;
  otp_not_starts_with?: Maybe<String>;
  otp_ends_with?: Maybe<String>;
  otp_not_ends_with?: Maybe<String>;
  expires_at?: Maybe<DateTimeInput>;
  expires_at_not?: Maybe<DateTimeInput>;
  expires_at_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  expires_at_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  expires_at_lt?: Maybe<DateTimeInput>;
  expires_at_lte?: Maybe<DateTimeInput>;
  expires_at_gt?: Maybe<DateTimeInput>;
  expires_at_gte?: Maybe<DateTimeInput>;
  is_verified?: Maybe<Boolean>;
  is_verified_not?: Maybe<Boolean>;
  userId?: Maybe<String>;
  userId_not?: Maybe<String>;
  userId_in?: Maybe<String[] | String>;
  userId_not_in?: Maybe<String[] | String>;
  userId_lt?: Maybe<String>;
  userId_lte?: Maybe<String>;
  userId_gt?: Maybe<String>;
  userId_gte?: Maybe<String>;
  userId_contains?: Maybe<String>;
  userId_not_contains?: Maybe<String>;
  userId_starts_with?: Maybe<String>;
  userId_not_starts_with?: Maybe<String>;
  userId_ends_with?: Maybe<String>;
  userId_not_ends_with?: Maybe<String>;
  AND?: Maybe<OtpScalarWhereInput[] | OtpScalarWhereInput>;
  OR?: Maybe<OtpScalarWhereInput[] | OtpScalarWhereInput>;
  NOT?: Maybe<OtpScalarWhereInput[] | OtpScalarWhereInput>;
}

export interface OtpUpdateManyWithWhereNestedInput {
  where: OtpScalarWhereInput;
  data: OtpUpdateManyDataInput;
}

export interface OtpUpdateManyDataInput {
  otp?: Maybe<String>;
  expires_at?: Maybe<DateTimeInput>;
  is_verified?: Maybe<Boolean>;
  userId?: Maybe<String>;
}

export interface UserUpdateManyMutationInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  token?: Maybe<String>;
  isVerified?: Maybe<Boolean>;
  resetToken?: Maybe<String>;
  resetTokenExpires?: Maybe<DateTimeInput>;
}

export interface OtpSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<OtpWhereInput>;
  AND?: Maybe<OtpSubscriptionWhereInput[] | OtpSubscriptionWhereInput>;
  OR?: Maybe<OtpSubscriptionWhereInput[] | OtpSubscriptionWhereInput>;
  NOT?: Maybe<OtpSubscriptionWhereInput[] | OtpSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Otp {
  id: ID_Output;
  otp?: String;
  expires_at?: DateTimeOutput;
  is_verified?: Boolean;
  userId?: String;
}

export interface OtpPromise extends Promise<Otp>, Fragmentable {
  id: () => Promise<ID_Output>;
  otp: () => Promise<String>;
  expires_at: () => Promise<DateTimeOutput>;
  is_verified: () => Promise<Boolean>;
  user: <T = UserPromise>() => T;
  userId: () => Promise<String>;
}

export interface OtpSubscription
  extends Promise<AsyncIterator<Otp>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  otp: () => Promise<AsyncIterator<String>>;
  expires_at: () => Promise<AsyncIterator<DateTimeOutput>>;
  is_verified: () => Promise<AsyncIterator<Boolean>>;
  user: <T = UserSubscription>() => T;
  userId: () => Promise<AsyncIterator<String>>;
}

export interface OtpNullablePromise extends Promise<Otp | null>, Fragmentable {
  id: () => Promise<ID_Output>;
  otp: () => Promise<String>;
  expires_at: () => Promise<DateTimeOutput>;
  is_verified: () => Promise<Boolean>;
  user: <T = UserPromise>() => T;
  userId: () => Promise<String>;
}

export interface User {
  id: ID_Output;
  email?: String;
  password?: String;
  token?: String;
  isVerified?: Boolean;
  resetToken?: String;
  resetTokenExpires?: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  token: () => Promise<String>;
  isVerified: () => Promise<Boolean>;
  otps: <T = FragmentableArray<Otp>>(args?: {
    where?: OtpWhereInput;
    orderBy?: OtpOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  resetToken: () => Promise<String>;
  resetTokenExpires: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  token: () => Promise<AsyncIterator<String>>;
  isVerified: () => Promise<AsyncIterator<Boolean>>;
  otps: <T = Promise<AsyncIterator<OtpSubscription>>>(args?: {
    where?: OtpWhereInput;
    orderBy?: OtpOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  resetToken: () => Promise<AsyncIterator<String>>;
  resetTokenExpires: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  token: () => Promise<String>;
  isVerified: () => Promise<Boolean>;
  otps: <T = FragmentableArray<Otp>>(args?: {
    where?: OtpWhereInput;
    orderBy?: OtpOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  resetToken: () => Promise<String>;
  resetTokenExpires: () => Promise<DateTimeOutput>;
}

export interface OtpConnection {
  pageInfo: PageInfo;
  edges: OtpEdge[];
}

export interface OtpConnectionPromise
  extends Promise<OtpConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OtpEdge>>() => T;
  aggregate: <T = AggregateOtpPromise>() => T;
}

export interface OtpConnectionSubscription
  extends Promise<AsyncIterator<OtpConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OtpEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOtpSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface OtpEdge {
  node: Otp;
  cursor: String;
}

export interface OtpEdgePromise extends Promise<OtpEdge>, Fragmentable {
  node: <T = OtpPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OtpEdgeSubscription
  extends Promise<AsyncIterator<OtpEdge>>,
    Fragmentable {
  node: <T = OtpSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateOtp {
  count: Int;
}

export interface AggregateOtpPromise
  extends Promise<AggregateOtp>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOtpSubscription
  extends Promise<AsyncIterator<AggregateOtp>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface OtpSubscriptionPayload {
  mutation: MutationType;
  node: Otp;
  updatedFields: String[];
  previousValues: OtpPreviousValues;
}

export interface OtpSubscriptionPayloadPromise
  extends Promise<OtpSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OtpPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OtpPreviousValuesPromise>() => T;
}

export interface OtpSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OtpSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OtpSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OtpPreviousValuesSubscription>() => T;
}

export interface OtpPreviousValues {
  id: ID_Output;
  otp?: String;
  expires_at?: DateTimeOutput;
  is_verified?: Boolean;
  userId?: String;
}

export interface OtpPreviousValuesPromise
  extends Promise<OtpPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  otp: () => Promise<String>;
  expires_at: () => Promise<DateTimeOutput>;
  is_verified: () => Promise<Boolean>;
  userId: () => Promise<String>;
}

export interface OtpPreviousValuesSubscription
  extends Promise<AsyncIterator<OtpPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  otp: () => Promise<AsyncIterator<String>>;
  expires_at: () => Promise<AsyncIterator<DateTimeOutput>>;
  is_verified: () => Promise<AsyncIterator<Boolean>>;
  userId: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  email?: String;
  password?: String;
  token?: String;
  isVerified?: Boolean;
  resetToken?: String;
  resetTokenExpires?: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  token: () => Promise<String>;
  isVerified: () => Promise<Boolean>;
  resetToken: () => Promise<String>;
  resetTokenExpires: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  token: () => Promise<AsyncIterator<String>>;
  isVerified: () => Promise<AsyncIterator<Boolean>>;
  resetToken: () => Promise<AsyncIterator<String>>;
  resetTokenExpires: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Otp",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
